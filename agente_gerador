from spade.agent import Agent
from spade.behaviour import CyclicBehaviour
from spade.template import Template
from spade.message import Message
import random

 

class Gerador(Agent):
    grau =  random.randint(0,4)
    x = random.randint(-1000, 1000)
    a = 0
    while a == 0:
        a = random.randint(-100, 100)
    y = -1 * (a * x)
    b = 1*(a*x**2)

    b1 = random.randint(-1000, 1000)
    c= (-x**3 -(a-b1)*x**2 + a*b1*x)/(-x**2-a*x+b1*x+a*b1)
   
    class funcao_1grau(CyclicBehaviour):
        async def run(self):
            res = await self.receive(timeout=5)
            if res:
                x = float(res.body)
                x = float(Gerador.a * x + Gerador.y)
                print("Enviou para " + str(res.sender) + " f(", res.body, ")= ", x, "=>", int(x))
                msg = Message(to=str(res.sender))
                msg.set_metadata("performative", "inform")
                msg.body = str(int(x))
                await self.send(msg)

    class funcao_2grau(CyclicBehaviour):
        async def run(self):
            res = await self.receive(timeout=5)
            if res:
                x = float(res.body)
                x = float(Gerador.a*x**2 - Gerador.b)
                print("Enviou para " + str(res.sender) + " f(", res.body, ")= ", x, "=>", int(x))
                msg = Message(to=str(res.sender))
                msg.set_metadata("performative", "inform")
                msg.body = str(int(x))
                await self.send(msg)

    class tipo_funcao(CyclicBehaviour):
        async def run(self):
            msg = await self.receive(timeout=5)
            if msg:
                msg = Message(to=str(msg.sender))
                msg.set_metadata("performative", "inform")
                if(Gerador.grau == 1):
                    msg.body = "1grau"
                if(Gerador.grau == 2):
                    msg.body = "2grau" 
                if(Gerador.grau == 3):
                    msg.body = "3grau" 
                await self.send(msg)
                print("Respondeu para" + str(msg.sender) + " com " + msg.body)

    class funcao_3grau(CyclicBehaviour):
        async def run(self):
            res = await self.receive(timeout=5)
            if res:
                x = float(res.body)
                x = float(-0,2*(Gerador.a+x)(Gerador.b1-x)(Gerador.c-x))
                print("Enviou para " + str(res.sender) + " f(", res.body, ")= ", x, "=>", int(x))
                msg = Message(to=str(res.sender))
                msg.set_metadata("performative", "inform")
                msg.body = str(int(x))
                await self.send(msg)
    async def setup(self):
        t = Template()
        t.set_metadata("performative", "subscribe")
        if(Gerador.grau == 1):
            tf = self.funcao_1grau()
            print("Funcao de 1o grau: ", Gerador.x)
            print("Funcao: ", Gerador.a, "x + (", Gerador.y, ")")
        if(Gerador.grau == 2):
            tf = self.funcao_2grau()
            print("Funcao de 2o grau: ", Gerador.x)
            print("Funcao: ", Gerador.a, "x^2 - (", Gerador.b, ")")
        if(Gerador.grau == 3):
            tf = self.funcao_3grau()
            print("Funcao de 3o grau: ", Gerador.x)
            print("Funcao: (", Gerador.a, "+x)*(", Gerador.b1, "-x)*(",Gerador.c, "-x)")

        self.add_behaviour(tf, t)

        ft = self.tipo_funcao()
        template = Template()
        template.set_metadata("performative", "request")
        self.add_behaviour(ft, template)


gerador = Gerador("t_si@jix.im", "203055")
gerador.web.start(hostname="150.162.217.81", port="10000")
gerador.start()
